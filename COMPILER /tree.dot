digraph ParseTree {
  node [shape=box, fontname="Courier"];
  node0 [label="program"];
  node1 [label="func_def_list"];
  node2 [label="func_def"];
  node3 [label="int\n[KEYWORD]"];
  node2 -> node3;
  node4 [label="main\n[IDENTIFIER]"];
  node2 -> node4;
  node5 [label="(\n[LPAREN]"];
  node2 -> node5;
  node6 [label=")\n[RPAREN]"];
  node2 -> node6;
  node7 [label="block"];
  node8 [label="{\n[LBRACE]"];
  node7 -> node8;
  node9 [label="decl"];
  node10 [label="int\n[KEYWORD]"];
  node9 -> node10;
  node11 [label="a\n[IDENTIFIER]"];
  node9 -> node11;
  node12 [label=";\n[SEMICOLON]"];
  node9 -> node12;
  node7 -> node9;
  node13 [label="decl"];
  node14 [label="int\n[KEYWORD]"];
  node13 -> node14;
  node15 [label="b\n[IDENTIFIER]"];
  node13 -> node15;
  node16 [label=";\n[SEMICOLON]"];
  node13 -> node16;
  node7 -> node13;
  node17 [label="decl"];
  node18 [label="int\n[KEYWORD]"];
  node17 -> node18;
  node19 [label="c\n[IDENTIFIER]"];
  node17 -> node19;
  node20 [label=";\n[SEMICOLON]"];
  node17 -> node20;
  node7 -> node17;
  node21 [label="decl"];
  node22 [label="int\n[KEYWORD]"];
  node21 -> node22;
  node23 [label="d\n[IDENTIFIER]"];
  node21 -> node23;
  node24 [label=";\n[SEMICOLON]"];
  node21 -> node24;
  node7 -> node21;
  node25 [label="stmt"];
  node26 [label="a\n[IDENTIFIER]"];
  node25 -> node26;
  node27 [label="=\n[ASSIGN]"];
  node25 -> node27;
  node28 [label="expr"];
  node29 [label="4\n[NUMBER]"];
  node28 -> node29;
  node25 -> node28;
  node30 [label=";\n[SEMICOLON]"];
  node25 -> node30;
  node7 -> node25;
  node31 [label="stmt"];
  node32 [label="b\n[IDENTIFIER]"];
  node31 -> node32;
  node33 [label="=\n[ASSIGN]"];
  node31 -> node33;
  node34 [label="expr"];
  node35 [label="3\n[NUMBER]"];
  node34 -> node35;
  node31 -> node34;
  node36 [label=";\n[SEMICOLON]"];
  node31 -> node36;
  node7 -> node31;
  node37 [label="stmt"];
  node38 [label="c\n[IDENTIFIER]"];
  node37 -> node38;
  node39 [label="=\n[ASSIGN]"];
  node37 -> node39;
  node40 [label="expr"];
  node41 [label="a\n[IDENTIFIER]"];
  node40 -> node41;
  node42 [label="+\n[OPERATOR]"];
  node40 -> node42;
  node43 [label="expr"];
  node44 [label="b\n[IDENTIFIER]"];
  node43 -> node44;
  node45 [label="*\n[OPERATOR]"];
  node43 -> node45;
  node46 [label="expr"];
  node47 [label="2\n[NUMBER]"];
  node46 -> node47;
  node43 -> node46;
  node40 -> node43;
  node37 -> node40;
  node48 [label=";\n[SEMICOLON]"];
  node37 -> node48;
  node7 -> node37;
  node49 [label="stmt"];
  node50 [label="d\n[IDENTIFIER]"];
  node49 -> node50;
  node51 [label="=\n[ASSIGN]"];
  node49 -> node51;
  node52 [label="expr"];
  node53 [label="c\n[IDENTIFIER]"];
  node52 -> node53;
  node54 [label="/\n[OPERATOR]"];
  node52 -> node54;
  node55 [label="expr"];
  node56 [label="2\n[NUMBER]"];
  node55 -> node56;
  node52 -> node55;
  node49 -> node52;
  node57 [label=";\n[SEMICOLON]"];
  node49 -> node57;
  node7 -> node49;
  node58 [label="stmt"];
  node59 [label="if\n[KEYWORD]"];
  node58 -> node59;
  node60 [label="(\n[LPAREN]"];
  node58 -> node60;
  node61 [label="expr"];
  node62 [label="d\n[IDENTIFIER]"];
  node61 -> node62;
  node63 [label=">\n[OPERATOR]"];
  node61 -> node63;
  node64 [label="expr"];
  node65 [label="5\n[NUMBER]"];
  node64 -> node65;
  node61 -> node64;
  node58 -> node61;
  node66 [label=")\n[RPAREN]"];
  node58 -> node66;
  node67 [label="block"];
  node68 [label="{\n[LBRACE]"];
  node67 -> node68;
  node69 [label="stmt"];
  node70 [label="d\n[IDENTIFIER]"];
  node69 -> node70;
  node71 [label="=\n[ASSIGN]"];
  node69 -> node71;
  node72 [label="expr"];
  node73 [label="d\n[IDENTIFIER]"];
  node72 -> node73;
  node74 [label="-\n[OPERATOR]"];
  node72 -> node74;
  node75 [label="expr"];
  node76 [label="1\n[NUMBER]"];
  node75 -> node76;
  node72 -> node75;
  node69 -> node72;
  node77 [label=";\n[SEMICOLON]"];
  node69 -> node77;
  node67 -> node69;
  node78 [label="}\n[RBRACE]"];
  node67 -> node78;
  node58 -> node67;
  node79 [label="else\n[KEYWORD]"];
  node58 -> node79;
  node80 [label="block"];
  node81 [label="{\n[LBRACE]"];
  node80 -> node81;
  node82 [label="stmt"];
  node83 [label="d\n[IDENTIFIER]"];
  node82 -> node83;
  node84 [label="=\n[ASSIGN]"];
  node82 -> node84;
  node85 [label="expr"];
  node86 [label="d\n[IDENTIFIER]"];
  node85 -> node86;
  node87 [label="+\n[OPERATOR]"];
  node85 -> node87;
  node88 [label="expr"];
  node89 [label="1\n[NUMBER]"];
  node88 -> node89;
  node85 -> node88;
  node82 -> node85;
  node90 [label=";\n[SEMICOLON]"];
  node82 -> node90;
  node80 -> node82;
  node91 [label="}\n[RBRACE]"];
  node80 -> node91;
  node58 -> node80;
  node7 -> node58;
  node92 [label="stmt"];
  node93 [label="while\n[KEYWORD]"];
  node92 -> node93;
  node94 [label="(\n[LPAREN]"];
  node92 -> node94;
  node95 [label="expr"];
  node96 [label="d\n[IDENTIFIER]"];
  node95 -> node96;
  node97 [label="<\n[OPERATOR]"];
  node95 -> node97;
  node98 [label="expr"];
  node99 [label="20\n[NUMBER]"];
  node98 -> node99;
  node95 -> node98;
  node92 -> node95;
  node100 [label=")\n[RPAREN]"];
  node92 -> node100;
  node101 [label="block"];
  node102 [label="{\n[LBRACE]"];
  node101 -> node102;
  node103 [label="stmt"];
  node104 [label="d\n[IDENTIFIER]"];
  node103 -> node104;
  node105 [label="=\n[ASSIGN]"];
  node103 -> node105;
  node106 [label="expr"];
  node107 [label="d\n[IDENTIFIER]"];
  node106 -> node107;
  node108 [label="+\n[OPERATOR]"];
  node106 -> node108;
  node109 [label="expr"];
  node110 [label="1\n[NUMBER]"];
  node109 -> node110;
  node106 -> node109;
  node103 -> node106;
  node111 [label=";\n[SEMICOLON]"];
  node103 -> node111;
  node101 -> node103;
  node112 [label="}\n[RBRACE]"];
  node101 -> node112;
  node92 -> node101;
  node7 -> node92;
  node113 [label="stmt"];
  node114 [label="return\n[KEYWORD]"];
  node113 -> node114;
  node115 [label="expr"];
  node116 [label="d\n[IDENTIFIER]"];
  node115 -> node116;
  node113 -> node115;
  node117 [label=";\n[SEMICOLON]"];
  node113 -> node117;
  node7 -> node113;
  node118 [label="}\n[RBRACE]"];
  node7 -> node118;
  node2 -> node7;
  node1 -> node2;
  node0 -> node1;
}
